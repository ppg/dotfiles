<% print("Your Full Name: "); STDOUT.flush; @fullname = STDIN.gets.chomp -%>
<% print("Your Email: "); STDOUT.flush; @email = STDIN.gets.chomp -%>
<% print("GitHub Username: "); STDOUT.flush; @github_username = STDIN.gets.chomp -%>
<%# print("GitHub API Token: "); STDOUT.flush; @github_token = STDIN.gets.chomp -%>
[user]
  name = <%= @fullname %>
  email = <%= @email %>
[github]
  user = <%= @github_username %>
  #token = <%= @github_token %>
[credential]
<% if "#{`uname`}" == "Darwin" -%>
  helper = osxkeychain
<% else -%>
  helper = cache
<% end -%>

[alias]
  st = status -sb
  df = diff
  co = checkout
  ci = commit
  <%- branch_format = '%(HEAD) %(color:red)%(align:9)%(objectname:short)%(upstream:trackshort)%(end)%(color:reset) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject)' -%>
  <%- branch_format_ext = "#{branch_format} - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))" -%>
  br = for-each-ref refs/heads/ --format='<%= branch_format %>'
  brs = for-each-ref refs/heads/ --format='<%= branch_format %>' --sort=committerdate
  brn = for-each-ref refs/heads/ --format='<%= branch_format_ext %>'
  brsn = for-each-ref refs/heads/ --format='<%= branch_format_ext %>' --sort=committerdate
  lg = log -p
  lol = log --graph --pretty=oneline --abbrev-commit --decorate
  lola = log --graph --pretty=oneline --abbrev-commit --decorate --all
<% log_format = '%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' -%>
  loln = log --graph --pretty=format:'<%= log_format %>' --abbrev-commit --decorate
  lolan = log --graph --pretty=format:'<%= log_format %>' --abbrev-commit --decorate --all
  # Omits any commits that came in from a merge, showing only the merge commit
  lofirst = log --graph --pretty=oneline --abbrev-commit --decorate --first-parent
  lonfirst = log --graph --pretty=format:'<%= log_format %>' --abbrev-commit --decorate --first-parent
  # Shows commits per person in descending order
  loscore = shortlog -n --summary

  # checkout Branch from remote (for when git co <branch_name> won't work
  # because it matches more than one remote branch)
  # checkout Branch
  #   git cobr <remote> <branch_name>
  cobr = "!f() { git fetch $1 $2 && git checkout -b $2 $1/$2; }; f"

  # checkout PR
  #   git copr <remote> <pr#>
  copr = "!f() { git fetch $1 pull/$2/head:pr-$2 && git checkout pr-$2; }; f"

[color]
  diff = auto
  status = auto
  branch = auto

[core]
  editor = /usr/bin/vim
  excludesfile = ~/.gitignore
#  autocrlf = true
#  safecrlf = false

[help]
  autocorrect = 1

<% diffmerge_path = `which diffmerge`.strip -%>
[difftool.diffmerge]
  #path = <%= diffmerge_path %>
  cmd = <%= diffmerge_path %> "$LOCAL" "$REMOTE"
[mergetool.diffmerge]
  #path = <%= diffmerge_path %>
  cmd = <%= diffmerge_path %> --merge --result="$MERGED" "$LOCAL" "$BASE" "$REMOTE"
  trustExitCode = true

<% meld_path = `which meld`.strip -%>
[difftool.meld]
  path = <%= meld_path %>
[mergetool.meld]
  path = <%= meld_path %>

<% opendiff_path = `which opendiff`.strip -%>
[difftool.opendiff]
  path = <%= opendiff_path %>
[mergetool.opendiff]
  path = <%= opendiff_path %>

[difftool]
  prompt = false
[mergetool]
  prompt = false

<% tool = diffmerge_path.empty? ? meld_path.empty? ? 'opendiff' : 'meld' : 'diffmerge' -%>
[diff]
  tool = <%= tool %>
  guitool = <%= tool %>
  wsErrorHighlight = all
[merge]
  tool = <%= tool %>
  guitool = <%= tool %>
  wsErrorHighlight = all

[diff "nodiff"]
  command = /bin/true

[sendemail]
  from = Peter P. Gengler <<%= @email %>>
  smtpserver = smtp.gmail.com
  smtpuser = ppgengler@gmail.com
  smtpencryption = tls
  smtpserverport = 587
  chainreplyto = false

[push]
  default = simple

[remote.origin]
  push = HEAD

[branch]
  autosetupmerge = true

[branch "master"]
  mergeoptions = --ff-only

[branch "develop"]
  mergeoptions = --ff-only

